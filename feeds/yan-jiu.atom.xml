<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2lu3の三日坊主日記 - 研究</title><link href="https://2lu3.github.io/" rel="alternate"></link><link href="https://2lu3.github.io/feeds/yan-jiu.atom.xml" rel="self"></link><id>https://2lu3.github.io/</id><updated>2024-04-26T16:58:24+09:00</updated><entry><title>Cloudflareの100MB upload size limit突破のためGit LFS→Git+DVC+Minioに移行した</title><link href="https://2lu3.github.io/cloudflareno100mb-upload-size-limittu-po-notamegit-lfs-gitdvcminioniyi-xing-shita.html" rel="alternate"></link><published>2024-04-26T16:58:24+09:00</published><updated>2024-04-26T16:58:24+09:00</updated><author><name>2lu3</name></author><id>tag:2lu3.github.io,2024-04-26:/cloudflareno100mb-upload-size-limittu-po-notamegit-lfs-gitdvcminioniyi-xing-shita.html</id><summary type="html">&lt;p&gt;研究データを自宅サーバーに保管し、バイナリファイルはGit LFSを使用して管理していた。しかし、Cloudflareを導入することでGit LFSでも100MB以上のファイルをアップロードすることができなくなった。そのため、チャンクアップロードに対応したMinioとバイナリファイルバージョン管理ができるDVCを使うことで100MB以上のファイルをアップロードできるようになった。&lt;/p&gt;</summary><content type="html">&lt;p&gt;この記事は&lt;a href="https://zenn.dev/2lu3"&gt;Zenn&lt;/a&gt;と&lt;a href="https://2lu3.github.io/"&gt;個人ブログ&lt;/a&gt;の両方で公開しています。&lt;/p&gt;
&lt;h1&gt;前提条件&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;研究データを自宅サーバーで管理している&lt;/li&gt;
&lt;li&gt;研究データはテキストファイルに加えて10GBを超えるようなバイナリファイルも扱っている&lt;/li&gt;
&lt;li&gt;以前は、バイナリファイルをGit LFSを用いてバージョン管理していた&lt;/li&gt;
&lt;li&gt;ネットワーク構成変更により、Cloudflare Tunnelを使って外部のネットワークから自宅サーバーにアクセスできるようにした&lt;/li&gt;
&lt;li&gt;以前は、DDNS+ルーターのDMZ機能を用いて外部からアクセスできた&lt;/li&gt;
&lt;li&gt;Cloudflare Tunnelでは100MB以上のファイルをアップロードすることができない&lt;/li&gt;
&lt;li&gt;そのため、10GBを超えるバイナリファイルをGit LFSで管理することができなくなった&lt;/li&gt;
&lt;li&gt;Git LFSにはチャンクアップロードの機能は実装されていないらしい&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;解決方法&lt;/h1&gt;
&lt;p&gt;Git LFSの代わりにに、Git + DVC + Minioを使用することで回避した。&lt;/p&gt;
&lt;h2&gt;DVCとMinioとは&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://dvc.ai/"&gt;Data Version Control&lt;/a&gt;は機械学習分野のレポジトリ向けにバイナリファイルのバージョン管理をするツールです。機械学習レポジトリでは、同じコードでパラメーターを変えて学習することでパラメーターごとに異なったモデルの重みなどの出力ファイルが出てきます。機械学習向けに便利な機能がありますが、今回私は使わないので説明しません。気になる方は&lt;a href="https://qiita.com/meow_noisy/items/a644547930e6f2dea12d"&gt;機械学習プロジェクトのデータバージョン管理ツール『DVC』の「Get Started」のサブノート #機械学習 - Qiita&lt;/a&gt;がわかりやすかったのでそちらを参照してください。&lt;/p&gt;
&lt;p&gt;MinioはAWS S3互換 OSS オブジェクトストレージサーバーです。DVCはバイナリファイルのアップロード先を色々設定できるのですが、Minioも指定できます。Git LFSと異なり1つの大きなファイルを分割してアップロードするチャンクアップロードに対応しているので、先述のCloudflare Tunnelの100MB制限を突破することができます。&lt;/p&gt;
&lt;h2&gt;自宅サーバー側での作業&lt;/h2&gt;
&lt;h3&gt;Cloudflare TunnelでMinio用のサブドメインを設定する&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;http://minio:9000&lt;/code&gt;(API用)と&lt;code&gt;http://minio:9001&lt;/code&gt;(Webページ用)のそれぞれにサブドメインを割り当てました。&lt;/p&gt;
&lt;h3&gt;MinioをDocker Containerとしてたてる&lt;/h3&gt;
&lt;p&gt;タグ名は最後にZがついてるものを選びました。また、Cloudflare TunnelもDockerのコンテナを使っているので、そのコンテナと同じNetworkにいる必要があります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;minio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;quay.io/minio/minio:タグ名&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;volume&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;minio_data&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/data&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;MINIO_ROOT_USER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${MINIO_ROOT_USER}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;MINIO_ROOT_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${MINIO_ROOT_PASSWORD}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;server /data --console-address &amp;quot;:9001&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;MinioのBuketを作成する&lt;/h3&gt;
&lt;p&gt;クライアント側での作業で使うので、作成したBuketの名前は覚えておきましょう。&lt;/p&gt;
&lt;h2&gt;クライアント側での作業&lt;/h2&gt;
&lt;h3&gt;dvcの初期設定&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;dvc&lt;span class="o"&gt;[&lt;/span&gt;s3&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gitで管理しているレポジトリのpath
dvc&lt;span class="w"&gt; &lt;/span&gt;init

dvc&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;minio&lt;span class="w"&gt; &lt;/span&gt;s3://Bucketの名前
dvc&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;modify&lt;span class="w"&gt; &lt;/span&gt;minio&lt;span class="w"&gt; &lt;/span&gt;endpointurl&lt;span class="w"&gt; &lt;/span&gt;Cloudflare&lt;span class="w"&gt; &lt;/span&gt;Tunnelで指定したドメイン
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;使い方&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dvc&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;ファイル名
dvc&lt;span class="w"&gt; &lt;/span&gt;push
dvc&lt;span class="w"&gt; &lt;/span&gt;pull
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;あたりが使えれば良さそう&lt;/p&gt;</content><category term="研究"></category><category term="docker"></category><category term="cloudflare"></category><category term="minio"></category><category term="dvc"></category><category term="git"></category><category term="server"></category></entry><entry><title>タンパク質構造をpythonで扱うためのライブラリを調べてみた</title><link href="https://2lu3.github.io/tanpakuzhi-gou-zao-wopythondexi-utamenoraiburariwodiao-betemita.html" rel="alternate"></link><published>2023-02-28T15:13:56+09:00</published><updated>2023-02-28T15:39:44+09:00</updated><author><name>2lu3</name></author><id>tag:2lu3.github.io,2023-02-28:/tanpakuzhi-gou-zao-wopythondexi-utamenoraiburariwodiao-betemita.html</id><summary type="html">&lt;p&gt;タンパク質構造ファイルとpythonで扱うためのライブラリを調べてみた&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前書き&lt;/h1&gt;
&lt;p&gt;今までタンパク質の構造データといえばpdbファイルしか知らなかったのですが、mmCIFという形式があることをボスに教えていただいたのでどんなファイル形式が存在するのか、そしてそのファイルをpythonでいじれるライブラリはどんなものがあるのかを調べてみた。&lt;/p&gt;
&lt;h1&gt;タンパク質構造のファイル形式&lt;/h1&gt;
&lt;h2&gt;PDB&lt;/h2&gt;
&lt;p&gt;拡張子は&lt;code&gt;.pdb&lt;/code&gt;。
タンパク質の構造を記録するファイルで最も有名なのがpdbファイルだと思います。
1行80文字(パンチカードの幅の成約)以内に収まるように設計されています。
ただし、最近になり構造データが大きくなることでpdb形式の限界に到達したため新しい形式の方が良いです。
具体的には、1行80文字なので99,999原子以下かつ36 chainまで、座標は最大4桁という制限があります。&lt;/p&gt;
&lt;h2&gt;mmCIFファイル&lt;/h2&gt;
&lt;p&gt;拡張子は&lt;code&gt;.cif&lt;/code&gt;。
上のPDBファイルの問題点を解消したファイル形式。
結晶構造で使われているCIF形式を、高分子用に拡張しています。&lt;/p&gt;
&lt;h2&gt;PDBML&lt;/h2&gt;
&lt;p&gt;mmCIFファイルをxmlで記述した形式(なので拡張子は&lt;code&gt;.xml&lt;/code&gt;)。
xmlなので多くの分野で使われるツールを使うことができ、XMLスキーマを使った検証も行えます。
PDBデータの正式なXML形式のフォーマットだそうです。&lt;/p&gt;
&lt;h2&gt;その他&lt;/h2&gt;
&lt;p&gt;他にも、NMRで解析した場合に必要なファイルやX線結晶解析の場合に必要なファイルなどがありますが説明は省きます。&lt;/p&gt;
&lt;h1&gt;pythonライブラリ&lt;/h1&gt;
&lt;h2&gt;&lt;a href="https://github.com/rcsb/py-mmcif"&gt;rcsb/py-mmcif: mmCIF Core Access Library&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This module includes a native Python mmCIF API for data files and dictionaries along with pybind11 wrappers for the PDB C++ Core mmCIF Library.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;とある通り、低レイヤーなAPIを提供しているみたいです。&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://gemmi.readthedocs.io/en/latest/"&gt;GEMMI - library for structural biology — Gemmi 0.5.8 documentation&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Gemmi is a library, accompanied by a set of programs, developed primarily for use in &lt;strong&gt;macromolecular crystallography&lt;/strong&gt; (MX). For working with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macromolecular models (content of PDB, PDBx/mmCIF and mmJSON files),&lt;/li&gt;
&lt;li&gt;refinement restraints (CIF files),&lt;/li&gt;
&lt;li&gt;reflection data (MTZ and mmCIF formats),&lt;/li&gt;
&lt;li&gt;data on a 3D grid (electron density maps, masks, MRC/CCP4 format)&lt;/li&gt;
&lt;li&gt;crystallographic symmetry.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;もともと高分子結晶学用に開発されていたライブラリーですが、他にもいろいろ使えるみたいです。&lt;/p&gt;
&lt;p&gt;ドキュメントをチラ見したところ例えば、下のようなものを見つけました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ファイルからモデルを読み込む&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jeol.co.jp/words/emterms/20121023.022259.html"&gt;空間群&lt;/a&gt;(対称性を扱う議論らしい)をモデルの中から探す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find_spacegroup_by_name&lt;/code&gt;みたいなメソッドがあった&lt;/li&gt;
&lt;li&gt;unit cell(結晶学の用語？)や座標を便利に扱える&lt;/li&gt;
&lt;li&gt;ある原子から一定距離にある原子をリストアップする&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="https://github.com/samirelanduk/atomium"&gt;samirelanduk/atomium: Python macromolecular parsing (with .pdb/.cif/.mmtf parsing and production)&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;atomium is a molecular modeller and file parser, capable of reading from and writing to .pdb, .cif and .mmtf files.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;atomium&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atomium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5HVD&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;ligands&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Chain&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="n"&gt;residues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ReadMeに書いてあるexampleを読んだほうが話が早いですが、構造モデルのchain, atomを検索/取得/追加できます。さらに、近くのatomやchainを調べられます。&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://cctbx.github.io/iotbx/index.html"&gt;iotbx - file readers and writers — CCTBX Developer documentation&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The iotbx module contains most tools for reading and writing the standard formats used by both macromolecular and small-molecule crystallographers, including PDB, CIF, MTZ, and various other file types. For some formats the resulting data will be encapsulated in objects defined in &lt;a href="https://cctbx.github.io/cctbx/cctbx.html#module-cctbx"&gt;&lt;code&gt;cctbx&lt;/code&gt;&lt;/a&gt; and/or &lt;code&gt;scitbx&lt;/code&gt;; others have custom classes, in particular PDB/mmCIF files which have their own complex internal representation independent of the X-ray scattering properties.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;高分子結晶学でも低分子結晶学でも使えるライブラリーです。ドキュメントをちゃんと読む時間はなかったのですが、上のatomiumと同等の機能はありそうに思えました。&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://github.com/soedinglab/pdbx"&gt;soedinglab/pdbx: pdbx is a parser module in python for structures of the protein data bank in the mmcif format&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Proper recognition to the &lt;a href="http://mmcif.wwpdb.org/docs/sw-examples/python/html/index.html"&gt;Protein Data Bank&lt;/a&gt; where this library for protein structures in the mmCIF format initially came from. We modified the original library to support python3. This fork is used by scripts in the HHsuite &lt;a href="https://github.com/soedinglab/hh-suite"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;チュートリアルが&lt;a href="https://mmcif.wwpdb.org/docs/sw-examples/python/html/"&gt;こちら&lt;/a&gt;。flaskみたいに機能は少なめな気がする。&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://biopython.org/"&gt;Biopython · Biopython&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;タンパク質の構造データ以外にも塩基配列など様々な機能が実装されている巨大なライブラリ。&lt;/p&gt;
&lt;p&gt;Entity→Structure→Model→Chain→Residue→Atomのように分けられているらしい。&lt;/p&gt;
&lt;p&gt;それぞれの値を参照/代入することはもちろん、原子間距離、二面角を求めたりもできる。&lt;/p&gt;
&lt;h1&gt;参考記事&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pdbj.org/cms-data/workshop/20130823/kinjo.pdf"&gt;PDB データの読み解き方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/蛋白質構造データバンク"&gt;蛋白質構造データバンク - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pdbj.org/help/data-format?lang=ja"&gt;PDBデータの書式 - 日本蛋白質構造データバンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bi.biopapyrus.jp/db/pdb.html"&gt;PDB | タンパク質の立体構造データベース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jstage.jst.go.jp/article/jcrsj/61/3/61_159/_pdf"&gt;Protein Data Bankで利用するPDBx/mmCIF形式について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nc-imr.imr.tohoku.ac.jp/HERMES/Analysis/SPGroup.html"&gt;Space Group for Crystal Structure Analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="研究"></category><category term="protein"></category><category term="pdb"></category><category term="mmcif"></category><category term="python"></category></entry></feed>